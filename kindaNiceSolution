
class MyNode:
    def __init__(self, xx, yy, position):
        self.x = xx
        self.y = yy
        self.position = position

    def print(self):
        print(f"{self.x}, {self.y}, {self.position}")

    def hk(self,nodeArray):
        return self.x - nodeArray[self.position - 1].x


n0 = MyNode(-7, -16185, 0)
n1 = MyNode(-4, -10116, 1)
n2 = MyNode(-2, -6070, 2)
n3 = MyNode(0, -2024, 3)
n4 = MyNode(1, -1, 4)
n5 = MyNode(5, 8091, 5)
n6 = MyNode(10, 18206, 6)
"""n0 = MyNode(-2, -2, 0)
n1 = MyNode(-1, -1, 1)
n2 = MyNode(1, 3, 2)
n3 = MyNode(2, 6, 3)"""
nodeArray = [n0, n1, n2, n3,n4,n5,n6]
#nodeArray = [n0, n1, n2, n3]
m = [0] * len(nodeArray)

def calc(nodeArray):
    q = [0]
    u = [0]
    p = [0]
    for x in range(1, len(nodeArray)-1):
        p.append((lam(x,nodeArray) * q[x - 1]) + 2)
        q.append((lam(x,nodeArray) - 1) / p[x])
        u.append((calcInt(x, nodeArray) - lam(x,nodeArray) * u[x - 1]) / p[x])
    i = 1
    m[len(nodeArray)-2] = u[len(nodeArray)-2]
    for x in range(0, len(nodeArray)-2):
        m[i] = u[i] + q[i] * m[i + 1]
        i -= 1


def lam(k,nodeArray):
    nk = nodeArray[k]
    nk1 = nodeArray[k + 1]
    return nk.hk(nodeArray) / (nk1.hk(nodeArray) + nk.hk(nodeArray))

def calcInt2(n1, n2):
    return (n2.y - n1.y) / (n2.x - n1.x)
def calcInt3(n1, n2, n3):
    return (calcInt2(n2, n3) - calcInt2(n1, n2)) / (n3.x - n1.x)
def calcInt(k,nodeArray):
    return 6 * calcInt3(nodeArray[k - 1], nodeArray[k], nodeArray[k + 1])


def make(nodeArray):
    for x in range(1,len(nodeArray)):
        w1=(1/6)*m[x-1]
        w2=(1/6)*m[x]
        w3=nodeArray[x-1].y - (1/6)*m[x-1]*(nodeArray[x].hk(nodeArray)**2)
        w4=nodeArray[x].y-(1/6)*m[x]*(nodeArray[x].hk(nodeArray)**2)
        print(f"sk(x) = {nodeArray[x].hk(nodeArray)**-1}({w1}({nodeArray[x].x}-x)^3 + {w2}(x-{nodeArray[x-1].x})^3+{w3}({nodeArray[x].x}-x) + {w4}(x -{nodeArray[x-1].x})")

calc(nodeArray)

#print(m)
make(nodeArray)

